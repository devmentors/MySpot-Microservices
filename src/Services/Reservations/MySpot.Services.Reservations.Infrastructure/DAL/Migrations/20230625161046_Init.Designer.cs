// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySpot.Services.Reservations.Infrastructure.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MySpot.Services.Reservations.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(ReservationsDbContext))]
    [Migration("20230625161046_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ParkingSpotId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WeeklyReservationsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyReservationsId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.WeeklyReservations", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Week")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("_jobTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("JobTitle");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Week")
                        .IsUnique();

                    b.ToTable("WeeklyReservations");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.Reservation", b =>
                {
                    b.HasOne("MySpot.Services.Reservations.Core.Entities.WeeklyReservations", null)
                        .WithMany("Reservations")
                        .HasForeignKey("WeeklyReservationsId");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.WeeklyReservations", b =>
                {
                    b.HasOne("MySpot.Services.Reservations.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.WeeklyReservations", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
