// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySpot.Services.Reservations.Infrastructure.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MySpot.Services.Reservations.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(ReservationsWriteDbContext))]
    partial class ReservationsWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Micro.Transactions.Inbox.InboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Inbox");
                });

            modelBuilder.Entity("Micro.Transactions.Outbox.OutboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Outbox");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("Capacity");

                    b.Property<DateTimeOffset?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("text")
                        .HasColumnName("LicensePlate");

                    b.Property<Guid?>("ParkingSpotId")
                        .HasColumnType("uuid")
                        .HasColumnName("ParkingSpotId");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("State");

                    b.Property<Guid?>("WeeklyReservationsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeeklyReservationsId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.WeeklyReservations", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<string>("_jobTitle")
                        .HasColumnType("text")
                        .HasColumnName("JobTitle");

                    b.Property<Guid?>("_userId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<DateTimeOffset?>("_week")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Week");

                    b.HasKey("Id");

                    b.HasIndex("_userId");

                    b.ToTable("WeeklyReservations");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.Reservation", b =>
                {
                    b.HasOne("MySpot.Services.Reservations.Core.Entities.WeeklyReservations", null)
                        .WithMany("_reservations")
                        .HasForeignKey("WeeklyReservationsId");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.WeeklyReservations", b =>
                {
                    b.HasOne("MySpot.Services.Reservations.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("_userId");
                });

            modelBuilder.Entity("MySpot.Services.Reservations.Core.Entities.WeeklyReservations", b =>
                {
                    b.Navigation("_reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
